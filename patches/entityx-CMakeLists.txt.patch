1a2
> set(CMAKE_TOOLCHAIN_FILE ${CMAKE_CURRENT_LIST_DIR}/devkitPPC.cmake)
21d21
< set(ENTITYX_BUILD_TESTING true CACHE BOOL "Enable building of tests.")
25d24
< set(ENTITYX_BUILD_SHARED true CACHE BOOL "Build shared libraries?")
124,143c123,135
< if (ENTITYX_BUILD_SHARED)
<     message(STATUS "-- Building shared libraries (-DENTITYX_BUILD_SHARED=0 to only build static libraries)")
<     add_library(entityx SHARED ${sources})
< 
<     set_target_properties(entityx PROPERTIES
<         OUTPUT_NAME entityx
<         DEBUG_POSTFIX -d
<         VERSION ${ENTITYX_VERSION}
<         SOVERSION ${ENTITYX_MAJOR_VERSION}
<         FOLDER entityx)
<     set(install_libs entityx)
<     set_property(TARGET entityx APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
<           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
< else()
<     add_library(entityx STATIC ${sources})
<     set_target_properties(entityx PROPERTIES DEBUG_POSTFIX -d FOLDER entityx)
<     set(install_libs entityx)
<     set_property(TARGET entityx APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
<           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
< endif (ENTITYX_BUILD_SHARED)
---
> # Build GCN and WII versions
> add_library(entityx_gcn STATIC ${sources})
> target_compile_options(entityx_gcn PUBLIC -DGEKKO -mogc)
> target_link_libraries(entityx_gcn "-mogc")
> set_target_properties(entityx_gcn 
>     PROPERTIES
>     OUTPUT_NAME "entityx"
>     DEBUG_POSTFIX -d
>     FOLDER entityx
>     ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/gcn"
>     LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/gcn"
>     RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/gcn"
> )
145,172c137,138
< # Make sure C++11 features are available
< target_compile_features(entityx PUBLIC cxx_auto_type)
< target_compile_features(entityx PUBLIC cxx_nullptr)
< target_compile_features(entityx PUBLIC cxx_static_assert)
< target_compile_features(entityx PUBLIC cxx_decltype)
< target_compile_features(entityx PUBLIC cxx_constexpr)
< target_compile_features(entityx PUBLIC cxx_sizeof_member)
< target_compile_features(entityx PUBLIC cxx_variadic_templates)
< target_compile_features(entityx PUBLIC cxx_rvalue_references)
< target_compile_features(entityx PUBLIC cxx_long_long_type)
< target_compile_features(entityx PUBLIC cxx_lambdas)
< target_compile_features(entityx PUBLIC cxx_func_identifier)
< 
< if (ENTITYX_BUILD_TESTING)
<     enable_testing()
<     create_test(pool_test entityx/help/Pool_test.cc ${install_libs})
<     create_test(entity_test entityx/Entity_test.cc ${install_libs})
<     create_test(event_test entityx/Event_test.cc ${install_libs})
<     create_test(system_test entityx/System_test.cc ${install_libs})
<     create_test(tags_component_test entityx/tags/TagsComponent_test.cc ${install_libs})
<     create_test(dependencies_test entityx/deps/Dependencies_test.cc ${install_libs})
<     create_test(benchmarks_test entityx/Benchmarks_test.cc ${install_libs})
<     if (ENTITYX_RUN_BENCHMARKS)
<         message(STATUS "-- Running benchmarks")
<     else ()
<         message(STATUS "-- Not running benchmarks (use -DENTITYX_RUN_BENCHMARKS=1 to enable)")
<     endif ()
< endif (ENTITYX_BUILD_TESTING)
---
> set_property(TARGET entityx_gcn APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
>       $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
173a140,166
> add_library(entityx_wii STATIC ${sources})
> target_compile_options(entityx_wii PUBLIC -DWII -mrvl)
> target_link_libraries(entityx_wii "-mrvl")
> set_target_properties(entityx_wii 
>     PROPERTIES
>     OUTPUT_NAME "entityx"
>     DEBUG_POSTFIX -d
>     FOLDER entityx
>     ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/wii"
>     LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/wii"
>     RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/wii"
> )
> set_property(TARGET entityx_wii APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
>       $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
> 
> # Make sure C++11 features are available
> target_compile_features(entityx_gcn PUBLIC cxx_auto_type)
> target_compile_features(entityx_gcn PUBLIC cxx_nullptr)
> target_compile_features(entityx_gcn PUBLIC cxx_static_assert)
> target_compile_features(entityx_gcn PUBLIC cxx_decltype)
> target_compile_features(entityx_gcn PUBLIC cxx_constexpr)
> target_compile_features(entityx_gcn PUBLIC cxx_sizeof_member)
> target_compile_features(entityx_gcn PUBLIC cxx_variadic_templates)
> target_compile_features(entityx_gcn PUBLIC cxx_rvalue_references)
> target_compile_features(entityx_gcn PUBLIC cxx_long_long_type)
> target_compile_features(entityx_gcn PUBLIC cxx_lambdas)
> target_compile_features(entityx_gcn PUBLIC cxx_func_identifier)
180,194d172
< 
< if (NOT WINDOWS OR CYGWIN)
<     set(entityx_libs -lentityx)
< 
<     configure_file(
<         ${CMAKE_CURRENT_SOURCE_DIR}/entityx.pc.in
<         ${CMAKE_CURRENT_BINARY_DIR}/entityx.pc
<         )
< 
<     install(
<         FILES ${CMAKE_CURRENT_BINARY_DIR}/entityx.pc
<         DESTINATION "${libdir}/pkgconfig"
<         )
< endif()
< 
202,204c180,188
<     TARGETS ${install_libs}
<     LIBRARY DESTINATION "${libdir}"
<     ARCHIVE DESTINATION "${libdir}"
---
>     TARGETS entityx_gcn
>     LIBRARY DESTINATION "${libdir}/gcn"
>     ARCHIVE DESTINATION "${libdir}/gcn"
>     RUNTIME DESTINATION "bin"
>     )
> install(
>     TARGETS entityx_wii
>     LIBRARY DESTINATION "${libdir}/wii"
>     ARCHIVE DESTINATION "${libdir}/wii"
